{"/home/travis/build/npmtest/node-npmtest-karma-jasmine-html-reporter/test.js":"/* istanbul instrument in package npmtest_karma_jasmine_html_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine-html-reporter/lib.npmtest_karma_jasmine_html_reporter.js":"/* istanbul instrument in package npmtest_karma_jasmine_html_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_karma_jasmine_html_reporter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_karma_jasmine_html_reporter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine-html-reporter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-karma-jasmine-html-reporter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_karma_jasmine_html_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_karma_jasmine_html_reporter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_karma_jasmine_html_reporter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_karma_jasmine_html_reporter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_karma_jasmine_html_reporter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_karma_jasmine_html_reporter.__dirname + '/lib.npmtest_karma_jasmine_html_reporter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine-html-reporter/node_modules/karma-jasmine-html-reporter/src/index.js":"var JASMINE_CORE_PATTERN = /([\\\\/]karma-jasmine[\\\\/])/i;\r\nvar createPattern = function(path) {\r\n  return {pattern: path, included: true, served: true, watched: false};\r\n};\r\n\r\nvar initReporter = function(files,  baseReporterDecorator) {\r\n  var jasmineCoreIndex = 0;\r\n\r\n  baseReporterDecorator(this);\r\n\r\n  files.forEach(function(file, index) {\r\n    if (JASMINE_CORE_PATTERN.test(file.pattern)) {\r\n      jasmineCoreIndex = index;\r\n    }\r\n  });\r\n\r\n  files.splice(++jasmineCoreIndex, 0, createPattern(__dirname + '/css/jasmine.css'));\r\n  files.splice(++jasmineCoreIndex, 0, createPattern(__dirname + '/lib/html.jasmine.reporter.js'));\r\n  files.splice(++jasmineCoreIndex, 0, createPattern(__dirname + '/lib/adapter.js'));\r\n};\r\n\r\ninitReporter.$inject = ['config.files',  'baseReporterDecorator'];\r\n\r\nmodule.exports = {\r\n  'reporter:kjhtml': ['type', initReporter]\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine-html-reporter/node_modules/karma-jasmine-html-reporter/src/lib/adapter.js":"(function(window){\r\n\r\n    /**\r\n     * Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.\r\n     */\r\n    jasmineRequire.html(jasmine);\r\n    /**\r\n     * Create the Jasmine environment. This is used to run all specs\r\n     * in a project.\r\n     */\r\n    var env = jasmine.getEnv();\r\n\r\n    /**\r\n     * ## Runner Parameters\r\n     *\r\n     * More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.\r\n     */\r\n\r\n    var queryString = new jasmine.QueryString({\r\n        getWindowLocation: function() { return window.location; }\r\n    });\r\n\r\n    var catchingExceptions = queryString.getParam(\"catch\");\r\n    env.catchExceptions(typeof catchingExceptions === \"undefined\" ? true : catchingExceptions);\r\n\r\n    /**\r\n     * ## Reporters\r\n     * The `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).\r\n     */\r\n    var htmlReporter = new jasmine.HtmlReporter({\r\n        env: env,\r\n        onRaiseExceptionsClick: function() { queryString.setParam(\"catch\", !env.catchingExceptions()); },\r\n        getContainer: function() { return document.body; },\r\n        createElement: function() { return document.createElement.apply(document, arguments); },\r\n        createTextNode: function() { return document.createTextNode.apply(document, arguments); },\r\n        timer: new jasmine.Timer()\r\n    });\r\n\r\n    /**\r\n     * The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.\r\n     */\r\n\r\n    env.addReporter(htmlReporter);\r\n\r\n    /**\r\n     * Filter which specs will be run by matching the start of the full name against the `spec` query param.\r\n     */\r\n    var specFilter = new jasmine.HtmlSpecFilter({\r\n        filterString: function() { return queryString.getParam(\"spec\"); }\r\n    });\r\n\r\n    env.specFilter = function(spec) {\r\n        return specFilter.matches(spec.getFullName());\r\n    };\r\n\r\n    htmlReporter.initialize();\r\n\r\n})(window);\r\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine-html-reporter/node_modules/karma-jasmine-html-reporter/src/lib/html.jasmine.reporter.js":"/*\r\n Copyright (c) 2008-2013 Pivotal Labs\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining\r\n a copy of this software and associated documentation files (the\r\n \"Software\"), to deal in the Software without restriction, including\r\n without limitation the rights to use, copy, modify, merge, publish,\r\n distribute, sublicense, and/or sell copies of the Software, and to\r\n permit persons to whom the Software is furnished to do so, subject to\r\n the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be\r\n included in all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\njasmineRequire.html = function(j$) {\r\n    j$.ResultsNode = jasmineRequire.ResultsNode();\r\n    j$.HtmlReporter = jasmineRequire.HtmlReporter(j$);\r\n    j$.QueryString = jasmineRequire.QueryString();\r\n    j$.HtmlSpecFilter = jasmineRequire.HtmlSpecFilter();\r\n};\r\n\r\njasmineRequire.HtmlReporter = function(j$) {\r\n\r\n    var noopTimer = {\r\n        start: function() {},\r\n        elapsed: function() { return 0; }\r\n    };\r\n\r\n    function HtmlReporter(options) {\r\n        var env = options.env || {},\r\n            getContainer = options.getContainer,\r\n            createElement = options.createElement,\r\n            createTextNode = options.createTextNode,\r\n            onRaiseExceptionsClick = options.onRaiseExceptionsClick || function() {},\r\n            timer = options.timer || noopTimer,\r\n            results = [],\r\n            specsExecuted = 0,\r\n            failureCount = 0,\r\n            pendingSpecCount = 0,\r\n            htmlReporterMain,\r\n            symbols;\r\n\r\n        this.initialize = function() {\r\n            htmlReporterMain = createDom(\"div\", {className: \"html-reporter\"},\r\n                createDom(\"div\", {className: \"banner\"},\r\n                    createDom(\"span\", {className: \"title\"}, \"Jasmine\"),\r\n                    createDom(\"span\", {className: \"version\"}, j$.version)\r\n                ),\r\n                createDom(\"ul\", {className: \"symbol-summary\"}),\r\n                createDom(\"div\", {className: \"alert\"}),\r\n                createDom(\"div\", {className: \"results\"},\r\n                    createDom(\"div\", {className: \"failures\"})\r\n                )\r\n            );\r\n            getContainer().appendChild(htmlReporterMain);\r\n\r\n            symbols = find(\".symbol-summary\");\r\n        };\r\n\r\n        var totalSpecsDefined;\r\n        this.jasmineStarted = function(options) {\r\n            totalSpecsDefined = options.totalSpecsDefined || 0;\r\n            timer.start();\r\n        };\r\n\r\n        var summary = createDom(\"div\", {className: \"summary\"});\r\n\r\n        var topResults = new j$.ResultsNode({}, \"\", null),\r\n            currentParent = topResults;\r\n\r\n        this.suiteStarted = function(result) {\r\n            currentParent.addChild(result, \"suite\");\r\n            currentParent = currentParent.last();\r\n        };\r\n\r\n        this.suiteDone = function(result) {\r\n            if (currentParent == topResults) {\r\n                return;\r\n            }\r\n\r\n            currentParent = currentParent.parent;\r\n        };\r\n\r\n        this.specStarted = function(result) {\r\n            currentParent.addChild(result, \"spec\");\r\n        };\r\n\r\n        var failures = [];\r\n        this.specDone = function(result) {\r\n            if (result.status != \"disabled\") {\r\n                specsExecuted++;\r\n            }\r\n\r\n            symbols.appendChild(createDom(\"li\", {\r\n                    className: result.status,\r\n                    id: \"spec_\" + result.id,\r\n                    title: result.fullName\r\n                }\r\n            ));\r\n\r\n            if (result.status == \"failed\") {\r\n                failureCount++;\r\n\r\n                var failure =\r\n                    createDom(\"div\", {className: \"spec-detail failed\"},\r\n                        createDom(\"div\", {className: \"description\"},\r\n                            createDom(\"a\", {title: result.fullName, href: specHref(result)}, result.fullName)\r\n                        ),\r\n                        createDom(\"div\", {className: \"messages\"})\r\n                    );\r\n                var messages = failure.childNodes[1];\r\n\r\n                for (var i = 0; i < result.failedExpectations.length; i++) {\r\n                    var expectation = result.failedExpectations[i];\r\n                    messages.appendChild(createDom(\"div\", {className: \"result-message\"}, expectation.message));\r\n                    messages.appendChild(createDom(\"div\", {className: \"stack-trace\"}, expectation.stack));\r\n                }\r\n\r\n                failures.push(failure);\r\n            }\r\n\r\n            if (result.status == \"pending\") {\r\n                pendingSpecCount++;\r\n            }\r\n        };\r\n\r\n        this.jasmineDone = function() {\r\n            var specSuiteId = \"\";\r\n            var banner = find(\".banner\");\r\n            banner.appendChild(createDom(\"span\", {className: \"duration\"}, \"finished in \" + timer.elapsed() / 1000 + \"s\"));\r\n\r\n            var alert = find(\".alert\");\r\n\r\n            alert.appendChild(createDom(\"span\", { className: \"exceptions\" },\r\n                createDom(\"label\", { className: \"label\", 'for': \"raise-exceptions\" }, \"raise exceptions\"),\r\n                createDom(\"input\", {\r\n                    className: \"raise\",\r\n                    id: \"raise-exceptions\",\r\n                    type: \"checkbox\"\r\n                })\r\n            ));\r\n            var checkbox = find(\"input\");\r\n\r\n            checkbox.checked = !env.catchingExceptions();\r\n            checkbox.onclick = onRaiseExceptionsClick;\r\n\r\n            if (specsExecuted < totalSpecsDefined) {\r\n                var skippedMessage = \"Ran \" + specsExecuted + \" of \" + totalSpecsDefined + \" specs - run all\";\r\n                alert.appendChild(\r\n                    createDom(\"span\", {className: \"bar skipped\"},\r\n                        createDom(\"a\", {href: \"?\", title: \"Run all specs\"}, skippedMessage)\r\n                    )\r\n                );\r\n            }\r\n            var statusBarMessage = \"\" + pluralize(\"spec\", specsExecuted) + \", \" + pluralize(\"failure\", failureCount);\r\n            if (pendingSpecCount) { statusBarMessage += \", \" + pluralize(\"pending spec\", pendingSpecCount); }\r\n\r\n            var statusBarClassName = \"bar \" + ((failureCount > 0) ? \"failed\" : \"passed\");\r\n            alert.appendChild(createDom(\"span\", {className: statusBarClassName}, statusBarMessage));\r\n\r\n            var results = find(\".results\");\r\n            results.appendChild(summary);\r\n\r\n            summaryList(topResults, summary);\r\n\r\n            function summaryList(resultsTree, domParent) {\r\n                var specListNode;\r\n                for (var i = 0; i < resultsTree.children.length; i++) {\r\n                    var resultNode = resultsTree.children[i];\r\n                    if (resultNode.type == \"suite\") {\r\n                        specSuiteId = resultNode.result.id;\r\n\r\n                        var suiteListNode = createDom(\"ul\", {className: \"suite\", id: \"suite-\" + specSuiteId},\r\n                            createDom(\"li\", {className: \"suite-detail\"},\r\n                                createDom(\"a\", {href: specHref(resultNode.result)}, resultNode.result.description)\r\n                            )\r\n                        );\r\n\r\n                        summaryList(resultNode, suiteListNode);\r\n                        domParent.appendChild(suiteListNode);\r\n                    }\r\n                    if (resultNode.type == \"spec\") {\r\n                        if (domParent.getAttribute(\"class\") != \"specs\") {\r\n                            specListNode = createDom(\"ul\", {className: \"specs\"});\r\n                            domParent.appendChild(specListNode);\r\n                        }\r\n\r\n                        var attributesObj = {\r\n                            className: resultNode.result.status,\r\n                            id: \"spec-\" + resultNode.result.id\r\n                        };\r\n\r\n                        specSuiteId && (attributesObj[\"spec-suite-id\"] = specSuiteId);\r\n\r\n                        specListNode.appendChild(\r\n                            createDom(\"li\", attributesObj,\r\n                                createDom(\"a\", {href: specHref(resultNode.result)}, resultNode.result.description)\r\n                            )\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (failures.length) {\r\n                alert.appendChild(\r\n                    createDom('span', {className: \"menu bar spec-list\"},\r\n                        createDom(\"span\", {}, \"Spec List | \"),\r\n                        createDom('a', {className: \"failures-menu\", href: \"#\"}, \"Failures\")));\r\n                alert.appendChild(\r\n                    createDom('span', {className: \"menu bar failure-list\"},\r\n                        createDom('a', {className: \"spec-list-menu\", href: \"#\"}, \"Spec List\"),\r\n                        createDom(\"span\", {}, \" | Failures \")));\r\n\r\n                find(\".failures-menu\").onclick = function() {\r\n                    setMenuModeTo('failure-list');\r\n                };\r\n                find(\".spec-list-menu\").onclick = function() {\r\n                    setMenuModeTo('spec-list');\r\n                };\r\n\r\n                setMenuModeTo('failure-list');\r\n\r\n                var failureNode = find(\".failures\");\r\n                for (var i = 0; i < failures.length; i++) {\r\n                    failureNode.appendChild(failures[i]);\r\n                }\r\n            }\r\n\r\n            scrollToSpec(document.querySelector(\".summary li.passed\"));\r\n        };\r\n\r\n        return this;\r\n\r\n        function find(selector) {\r\n            return getContainer().querySelector(selector);\r\n        }\r\n\r\n        function scrollToSpec(specEl){\r\n            var scroll = 0,\r\n                windowInnerHeight = window.innerHeight;\r\n\r\n            if(specEl){\r\n                var suiteId = specEl.getAttribute(\"spec-suite-id\"),\r\n                    parent = getParentById(specEl, \"suite-\" + suiteId);\r\n                    \r\n\r\n                if(parent && (parent.offsetTop > 0)){\r\n                    var parentHeight = parent.offsetHeight;\r\n\r\n                    scroll = (parent.offsetTop + parentHeight) > windowInnerHeight ? \r\n                        parent.offsetTop - windowInnerHeight/2 : 0; \r\n                }\r\n            }    \r\n            \r\n            document.body.scrollTop = scroll;\r\n        }\r\n\r\n        function getParentById(el, id){\r\n            var found = false,\r\n                parent = el;\r\n\r\n            while(!found){\r\n                if(parent && parent.parentNode){\r\n                    if(parent.parentNode.id === id){\r\n                        found = true;\r\n                    } \r\n                    \r\n                    parent = parent.parentNode;    \r\n                }else{\r\n                    found = true;\r\n                    parent = null;    \r\n                }\r\n            }\r\n\r\n            return parent;\r\n        }\r\n\r\n        function createDom(type, attrs, childrenVarArgs) {\r\n            var el = createElement(type);\r\n\r\n            for (var i = 2; i < arguments.length; i++) {\r\n                var child = arguments[i];\r\n\r\n                if (typeof child === 'string') {\r\n                    el.appendChild(createTextNode(child));\r\n                } else {\r\n                    if (child) {\r\n                        el.appendChild(child);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (var attr in attrs) {\r\n                if (attr == \"className\") {\r\n                    el[attr] = attrs[attr];\r\n                } else {\r\n                    el.setAttribute(attr, attrs[attr]);\r\n                }\r\n            }\r\n\r\n            return el;\r\n        }\r\n\r\n        function pluralize(singular, count) {\r\n            var word = (count == 1 ? singular : singular + \"s\");\r\n\r\n            return \"\" + count + \" \" + word;\r\n        }\r\n\r\n        function specHref(result) {\r\n            return \"?spec=\" + encodeURIComponent(result.fullName);\r\n        }\r\n\r\n        function setMenuModeTo(mode) {\r\n            htmlReporterMain.setAttribute(\"class\", \"html-reporter \" + mode);\r\n        }\r\n    }\r\n\r\n    return HtmlReporter;\r\n};\r\n\r\njasmineRequire.HtmlSpecFilter = function() {\r\n    function HtmlSpecFilter(options) {\r\n        var filterString = options && options.filterString() && options.filterString().replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\r\n        var filterPattern = new RegExp(filterString);\r\n\r\n        this.matches = function(specName) {\r\n            return filterPattern.test(specName);\r\n        };\r\n    }\r\n\r\n    return HtmlSpecFilter;\r\n};\r\n\r\njasmineRequire.ResultsNode = function() {\r\n    function ResultsNode(result, type, parent) {\r\n        this.result = result;\r\n        this.type = type;\r\n        this.parent = parent;\r\n\r\n        this.children = [];\r\n\r\n        this.addChild = function(result, type) {\r\n            this.children.push(new ResultsNode(result, type, this));\r\n        };\r\n\r\n        this.last = function() {\r\n            return this.children[this.children.length - 1];\r\n        };\r\n    }\r\n\r\n    return ResultsNode;\r\n};\r\n\r\njasmineRequire.QueryString = function() {\r\n    function QueryString(options) {\r\n\r\n        this.setParam = function(key, value) {\r\n            var paramMap = queryStringToParamMap();\r\n            paramMap[key] = value;\r\n            options.getWindowLocation().search = toQueryString(paramMap);\r\n        };\r\n\r\n        this.getParam = function(key) {\r\n            return queryStringToParamMap()[key];\r\n        };\r\n\r\n        return this;\r\n\r\n        function toQueryString(paramMap) {\r\n            var qStrPairs = [];\r\n            for (var prop in paramMap) {\r\n                qStrPairs.push(encodeURIComponent(prop) + \"=\" + encodeURIComponent(paramMap[prop]));\r\n            }\r\n            return \"?\" + qStrPairs.join('&');\r\n        }\r\n\r\n        function queryStringToParamMap() {\r\n            var paramStr = options.getWindowLocation().search.substring(1),\r\n                params = [],\r\n                paramMap = {};\r\n\r\n            if (paramStr.length > 0) {\r\n                params = paramStr.split('&');\r\n                for (var i = 0; i < params.length; i++) {\r\n                    var p = params[i].split('=');\r\n                    var value = decodeURIComponent(p[1]);\r\n                    if (value === \"true\" || value === \"false\") {\r\n                        value = JSON.parse(value);\r\n                    }\r\n                    paramMap[decodeURIComponent(p[0])] = value;\r\n                }\r\n            }\r\n\r\n            return paramMap;\r\n        }\r\n\r\n    }\r\n\r\n    return QueryString;\r\n};"}